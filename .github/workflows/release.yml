# I create and update Release PRs for each package when changes are merged to main.
#
# The `changeFinder` job scrapes the list of changed files from the git diff of 
# main from the previous latest release.
#
# Google's `release-please` then does the work of creating PRs with CHANGELOGS derived
# from the commit log, where messages should follow semantic-commit (fix: patch, feat: minor, fix!: major).
# `release-please` is also smart enough to automatically increment the package.version
# and create tags, prefixed with the package name (when `monorepo-tags: true`)
#
# We then add on our custom steps for deploying the thing to the end of the `release` job.
# - When a `client` release PR is merged, the package is publshed to npm.
# - When an `api` release PR is merged, the prod worker is published to Cloudflare.
on:
  push:
    branches:
      - main
name: Release
jobs:
  changeFinder:
    runs-on: ubuntu-latest
    outputs:
      nodePaths: ${{ steps.interrogate.outputs.nodePaths }}
    steps:
      - uses: actions/checkout@v2
      - name: Find changes from git diff from main
        id: interrogate
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const {execSync} = require('child_process');
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const latestRelease = await github.repos.getLatestRelease({
              owner,
              repo
            });
            console.log(`latest release: ${JSON.stringify(latestRelease.data)}`);
            execSync('git pull --tags');
            execSync(`git reset --hard ${latestRelease.data.tag_name}`);
            const status = execSync(`git diff --name-only origin/main`, { encoding: 'utf-8'});
            console.log(status);
            const changes = status.split('\n');
            let nodePaths = new Set();
            for (const change of changes) {
              if (change.startsWith('packages/')) {
                  const library = change.split('/')[1];
                  nodePaths.add(library);
              };
            }
            nodePaths = Array.from(nodePaths);
            if(nodePaths.length === 0){
              console.log(`::warning::No changes found, release will be skipped.`)
            }
            console.log(`::set-output name=nodePaths::${JSON.stringify(nodePaths)}`);

  release-pr:
    runs-on: ubuntu-latest
    needs: changeFinder
    if: ${{ fromJson(needs.changeFinder.outputs.nodePaths)[0] != '' }}
    strategy:
      fail-fast: false
      matrix:
        package: ${{fromJson(needs.changeFinder.outputs.nodePaths)}}
    steps:
      - name: Create Release PR
        uses: google-github-actions/release-please-action@v2
        id: release-please
        with:
          path: packages/${{ matrix.package }}
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          package-name: ${{ matrix.package }}
          monorepo-tags: true
          command: release-pr
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"refactor","section":"Changes","hidden":false},{"type":"chore","section":"Changes","hidden":false}]'

  release:
    runs-on: ubuntu-latest
    needs: changeFinder
    if: ${{ fromJson(needs.changeFinder.outputs.nodePaths)[0] != '' }}
    strategy:
      fail-fast: false
      matrix:
        package: ${{fromJson(needs.changeFinder.outputs.nodePaths)}}
    steps:
      - name: Handle Release PR Merge
        uses: GoogleCloudPlatform/release-please-action@v2
        id: tag-release
        with:
          path: packages/${{ matrix.package }}
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          monorepo-tags: true
          package-name: ${{ matrix.package }}
          command: github-release

      - uses: actions/checkout@v2
        if: ${{ steps.tag-release.outputs.release_created }}

      - uses: actions/setup-node@v2
        if: ${{ steps.tag-release.outputs.release_created }}
        with:
          node-version: '16'
          registry-url: 'https://registry.npmjs.org'

      - uses: bahmutov/npm-install@v1
        if: ${{ steps.tag-release.outputs.release_created }}

      # --- Client deploy steps  ---------------------------------------------
      - name: Client - NPM Publish
        if: ${{ steps.tag-release.outputs.release_created && matrix.package == 'client' }}
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}
        run: npm publish --workspace packages/client

      # --- w3 cli deploy steps  ---------------------------------------------
      - name: w3 cli - NPM Publish
        if: ${{ steps.tag-release.outputs.release_created && matrix.package == 'w3' }}
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}
        run: npm publish --workspace packages/w3

      # --- API deploy steps -------------------------------------------------
      - name: API - Deploy to Cloudflare
        if: ${{ steps.tag-release.outputs.release_created && matrix.package == 'api' }}
        # workaround for https://github.com/cloudflare/wrangler-action/issues/59 to use node 16
        uses: web3-storage/wrangler-action@node16
        env:
          SENTRY_TOKEN: ${{ secrets.PROD_SENTRY_TOKEN}}
          SENTRY_PROJECT: ${{ secrets.PROD_SENTRY_PROJECT}}
          SENTRY_UPLOAD: ${{ secrets.PROD_SENTRY_UPLOAD}}
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: 'packages/api'
          environment: 'production'

      # --- DB deploy steps -------------------------------------------------
      # - name: Update Postgres resources
      #   if: ${{ steps.tag-release.outputs.release_created && matrix.package == 'db' }}

      # --- Website deploy steps ----------------------------------------------
      - name: Deploy to Cloudflare pages
        if: ${{ steps.tag-release.outputs.release_created && matrix.package == 'website' }}
        # Reset the `website-prod` branch to trigger a production build & deploy on Cloudflare Pages.
        run: |
          git push origin --delete website-prod
          git push origin main:website-prod

      - run: npm run build -w packages/client
        if: ${{ steps.tag-release.outputs.release_created && matrix.package == 'website' }}
      - run: npm run build -w packages/website
        if: ${{ steps.tag-release.outputs.release_created && matrix.package == 'website' }}
        env:
          NEXT_PUBLIC_ENV: production
          NEXT_PUBLIC_API: https://api.web3.storage
          NEXT_PUBLIC_MAGIC: ${{ secrets.PROD_MAGIC_PUBLIC_KEY }}
          NEXT_PUBLIC_COUNTLY_URL: ${{ secrets.COUNTLY_URL }}
          NEXT_PUBLIC_COUNTLY_KEY: ${{ secrets.COUNTLY_KEY }}

      # Add the site to web3.storage, output the cid as `steps.ipfs.outputs.cid`
      - name: Add to web3.storage
        if: ${{ steps.tag-release.outputs.release_created && matrix.package == 'website' }}
        uses: web3-storage/add-to-web3@v1
        id: ipfs
        with:
          path_to_add: packages/website/out
          web3_token: ${{ secrets.WEB3_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy https://web3.storage
        if: ${{ steps.tag-release.outputs.release_created && matrix.package == 'website' }}
        run: npx dnslink-cloudflare --record _dnslink --domain web3.storage --link /ipfs/${{ steps.ipfs.outputs.cid }}
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
